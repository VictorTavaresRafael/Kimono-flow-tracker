import { supabase } from './src/lib/supabase';

// Script para configura√ß√£o inicial do banco de dados
async function setupDatabase() {
  console.log('üöÄ Iniciando configura√ß√£o do banco de dados...');

  try {
    // 1. Verificar conex√£o
    const { data, error } = await supabase.from('usuarios').select('count', { count: 'exact', head: true });
    
    if (error) {
      console.error('‚ùå Erro de conex√£o com Supabase:', error.message);
      console.log('üí° Verifique suas credenciais no arquivo .env');
      return;
    }

    console.log('‚úÖ Conex√£o com Supabase estabelecida');

    // 2. Verificar se existem usu√°rios
    const userCount = data || 0;
    console.log(`üìä Usu√°rios no sistema: ${userCount}`);

    // 3. Configurar RLS (Row Level Security)
    console.log('üîí Configurando pol√≠ticas de seguran√ßa...');
    
    const policies = [
      `ALTER TABLE usuarios ENABLE ROW LEVEL SECURITY;`,
      `CREATE POLICY IF NOT EXISTS "Usu√°rios autenticados podem ver dados" ON usuarios FOR SELECT TO authenticated USING (true);`,
      `CREATE POLICY IF NOT EXISTS "Permitir inser√ß√£o durante cadastro" ON usuarios FOR INSERT TO authenticated USING (true);`,
      `CREATE POLICY IF NOT EXISTS "Usu√°rios podem atualizar pr√≥prios dados" ON usuarios FOR UPDATE TO authenticated USING (auth.uid()::text = id::text);`
    ];

    for (const policy of policies) {
      const { error: policyError } = await supabase.rpc('exec_sql', { sql: policy });
      if (policyError && !policyError.message.includes('already exists')) {
        console.warn('‚ö†Ô∏è Aviso ao configurar pol√≠tica:', policyError.message);
      }
    }

    console.log('‚úÖ Pol√≠ticas de seguran√ßa configuradas');

    // 4. Criar usu√°rio admin padr√£o (opcional)
    if (userCount === 0) {
      console.log('üë§ Nenhum usu√°rio encontrado. Voc√™ pode criar o primeiro usu√°rio via interface web.');
    }

    console.log('üéâ Configura√ß√£o conclu√≠da com sucesso!');
    console.log('üìù Pr√≥ximos passos:');
    console.log('   1. Execute: npm run dev');
    console.log('   2. Acesse: http://localhost:8081/auth');
    console.log('   3. Crie sua primeira conta de administrador');

  } catch (error) {
    console.error('‚ùå Erro durante a configura√ß√£o:', error);
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  setupDatabase();
}

export { setupDatabase };
